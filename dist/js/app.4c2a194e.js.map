{"version":3,"file":"js/app.4c2a194e.js","mappings":"kIAyCA,QAdA,WAEE,OACE,uBAAKA,MAvBK,MAwBR,0BAAMC,MAAN,MACA,oCA1BQ,KA0BR,QACA,0BAvBG,GAAP,QADiBC,EAwBE,CAACC,UAAU,IAAKC,SAAS,MAvB7BD,UAAf,YAA4BD,EAAKE,WAwB7B,2BACA,2BAhBWC,EAgBG,oCAdT,2BAAOA,GAEP,mCAJX,IAAiBA,EAVEH,CA8BlB,E,aC3BD,QATA,WAEE,OACE,gCACE,gBAAC,EAAD,CAASI,EAAE,IAAIC,EAAG,IAGvB,E,cCNYC,EAAAA,EAAAA,GAAWC,SAASC,eAAe,QAE3CC,OAAOC,EAAMC,cAAcC,EAAK,CAAC,EAAG,I","sources":["webpack://react-webpack/./src/pages/jsx/index.jsx","webpack://react-webpack/./src/App.jsx","webpack://react-webpack/./src/main.js"],"sourcesContent":["// 盘点JSX语法细节\r\n\r\n// 1、在JSX中可以嵌套表达式，使用 {} 来嵌套。在JSX视图，凡是动态的变量（表达式）都使用 {}包起来。\r\n// 2、当JSX定义视图比较复杂时，建议换行，像HTML那样对齐，换行后建议用 () 把JSX元素整体包裹起来。\r\n// 3、JSX是变量，也是表达式，所以JSX元素可以作为函数的入参，也可以作为函数的返回值，还可以用在if/for循环中。\r\n\r\nconst hello = '你好'\r\nconst title = '千锋'\r\n\r\nfunction fullname (user) {\r\n  return `${user.firstname} ${user.lastname}`\r\n}\r\n\r\nconst ele = (\r\n  <div>\r\n    <h1>你好</h1>\r\n  </div>\r\n)\r\n\r\nfunction handle (arg) {\r\n  if (arg) {\r\n    return <div>{ arg }</div>\r\n  } else {\r\n    return <div>你好</div>\r\n  }\r\n}\r\n\r\nfunction B () {\r\n\r\n  return (\r\n    <div title={ title }>\r\n      <h1>{ hello + '吗' } ？</h1>\r\n      <h1>{ `${hello}吗 ？` }</h1>\r\n      <h1>{ fullname({firstname:'张', lastname:'三'}) }</h1>\r\n      <hr/>\r\n      <h1>{ handle( <span>大家好</span> ) }</h1>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default B\r\n","import PageJsx from '@/pages/jsx'\r\n\r\n// 根组件\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n      <PageJsx a='1' b={2} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// 入口文件\r\nimport { createRoot } from 'react-dom/client'\r\nimport App from './App.jsx' // eslint-disable-line\r\n\r\nconst root = createRoot(document.getElementById('app'))\r\n// root.render(<App />)  // @babel/preset-react，它要使用React.createElement()这个方法进行编译\r\nroot.render(React.createElement(App, {}, []))\r\n\r\n\r\n// import './assets/app.scss'\r\n\r\n/* eslint-disable */\r\n/* eslint-enable */\r\n\r\n// 动态导入技术（当webpack打包时，只要遇到()=>import()）会切割生成一个新的JS文件（chunk）\r\n// 这个技术就是代码分离（分割技术）\r\n// const dog = () => import('@/utils/dog')\r\n// dog()\r\n\r\n// import Dog from './utils/request'\r\n//\r\n// const d = new Dog()\r\n// d.run()\r\n//\r\n// const user = {\r\n//   name: '张三',\r\n//   child: {\r\n//     name: '李四',\r\n//     age: 10\r\n//   }\r\n// }\r\n//\r\n// console.log('---', user?.child?.age)\r\n//\r\n// var a = 100\r\n// console.log('a', a)\r\n// console.log('a', a)\r\n// console.log(100)\r\n"],"names":["title","hello","user","firstname","lastname","arg","a","b","createRoot","document","getElementById","render","React","createElement","App"],"sourceRoot":""}